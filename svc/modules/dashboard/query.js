const CONST = require('../../common/const');

module.exports = {
  InProgress: (condition) => (
    `SELECT COUNT(PROJECT_ID) AS TOTAL FROM PROJECT 
      WHERE PROJECT_STATUS_ID = 
        (SELECT STATUS_ID FROM PROJECT_STATUS WHERE STATUS_NAME = '${CONST.INPROGRESS}')
      AND ${condition}`
  ),
  Proposal: (condition) => (
    `SELECT COUNT(PROJECT_ID) AS TOTAL FROM PROJECT 
      WHERE PROJECT_STATUS_ID = 
        (SELECT STATUS_ID FROM PROJECT_STATUS WHERE STATUS_NAME = '${CONST.PROPOSAL}')
      AND ${condition}`
  ),
  UnassignedRole: (condition) => (
    `SELECT SUM(COUNT) AS TOTAL FROM 
      (SELECT COUNT(ID) AS COUNT FROM PLANNED_PROJECT_PEOPLE LEFT JOIN 
      PROJECT ON PLANNED_PROJECT_PEOPLE.PROJECT_ID = PROJECT.PROJECT_ID 
      WHERE ${condition}
      GROUP BY PROJECT.PROJECT_ID) as COUNT`
  ),
  ProjectStartedThisYear: (condition) => (
    `SELECT COUNT(PROJECT_ID) AS TOTAL FROM 
      PROJECT WHERE YEAR(START_DATE) = YEAR(NOW())
      AND ${condition}`
  ),
  ProjectEndThisYear: (condition) => (
    `SELECT COUNT(PROJECT_ID) AS TOTAL FROM 
      PROJECT WHERE YEAR(END_DATE) = YEAR(NOW())
      AND ${condition}`
  ),
  ProjectStarting: (condition) => (
    `SELECT COUNT(START_DATE) AS TOTAL FROM 
      PROJECT WHERE DATEDIFF(PROJECT.START_DATE, NOW()) > 0 
      AND ${condition}`
  ),
  ProjectEnding: (condition) => (
    `SELECT COUNT(END_DATE) AS TOTAL FROM 
      PROJECT WHERE DATEDIFF(PROJECT.END_DATE, NOW()) < ${CONST.GAP} 
      AND ${condition}`
  ),
  AdminStaff: () => (
    `SELECT COUNT(STAFF_ID) AS TOTAL FROM 
      STAFF WHERE STAFF_GROUP_ID = (
        SELECT GROUP_ID FROM STAFF_GROUP WHERE GROUP_NAME = '${CONST.OPERATION}'
      )`
  ),
  OPSStaff: () => (
    `SELECT COUNT(STAFF_ID) AS TOTAL FROM 
      STAFF WHERE STAFF_GROUP_ID = (
        SELECT GROUP_ID FROM STAFF_GROUP WHERE GROUP_NAME = '${CONST.TBD}'
      )`
  ),
  OnBench: () => (
    `SELECT COUNT(STAFF_ID) AS TOTAL FROM 
      STAFF WHERE STAFF_ID NOT IN (
        SELECT STAFF_ID FROM PROJECT_PEOPLE WHERE START_DATE <= NOW() AND END_DATE >= NOW() GROUP BY STAFF_ID
      )`
  ),
  StaffingGap: () => (
     /* Get all staff id, project start and end date details if they have */
    `SELECT STAFF.STAFF_ID, PROJECT_PEOPLE.START_DATE, PROJECT_PEOPLE.END_DATE 
      FROM STAFF LEFT JOIN PROJECT_PEOPLE ON STAFF.STAFF_ID = PROJECT_PEOPLE.STAFF_ID 
        AND PROJECT_PEOPLE.END_DATE >= NOW() 
      WHERE STAFF.STAFF_STATUS_ID = (SELECT STATUS_ID FROM STAFF_STATUS 
        WHERE STATUS_NAME = 'Active') 
      ORDER BY STAFF.STAFF_ID, PROJECT_PEOPLE.START_DATE, PROJECT_PEOPLE.END_DATE`
  ),
  OverUnderAllocation: () => (
    `SELECT COUNT(ALLOCATION_TOTAL) AS TOTAL FROM 
      (SELECT SUM(ALLOCATION) as ALLOCATION_TOTAL FROM PROJECT_PEOPLE
        WHERE PROJECT_PEOPLE.START_DATE <= NOW() AND PROJECT_PEOPLE.END_DATE >= NOW() 
        GROUP BY STAFF_ID HAVING ALLOCATION_TOTAL <> 100) as ALLOCATION_TOTAL`
  ),
  AssignmentEnding: () => (
    `SELECT COUNT(END_DATE) TOTAL FROM 
      PROJECT_PEOPLE WHERE START_DATE < NOW() AND END_DATE > NOW() 
      AND DATEDIFF(PROJECT_PEOPLE.END_DATE, NOW()) <= ${CONST.GAP}`
  )
}
