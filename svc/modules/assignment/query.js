const getStaffGapNow = `
    SELECT CURRENT.STAFF_ID
      FROM PROJECT_STAFF CURRENT
                INNER JOIN PROJECT_STAFF FUTURE
                          ON CURRENT.STAFF_ID = FUTURE.STAFF_ID
                              AND DATEDIFF(FUTURE.START_DATE, CURRENT.END_DATE) > 1
                              AND CURRENT.ID <> FUTURE.ID
                LEFT OUTER JOIN STAFF S on CURRENT.STAFF_ID = S.STAFF_ID
      WHERE CURRENT.END_DATE > CURDATE()
        AND FUTURE.END_DATE > CURDATE()
    `;

module.exports = {
  getProjectTeams: (condition) =>
    `
    SELECT
    CAST(
      CASE
          WHEN GAP.STAFF_ID IS NOT NULL THEN 'GAP'
          WHEN ALLOCATION < 80 THEN 'UNDER_ALLOCATED'
          WHEN ALLOCATION > 100 THEN 'OVER_ALLOCATED'
          WHEN ALLOCATION IS NULL THEN 'BENCH'
          ELSE 'NO_ALERT'
          END AS CHAR) AS ALLOCATION_STATUS,
      PROJECT_TEAM.ID,
      STAFF.STAFF_ID,
      STAFF.OFFICE_ID,
      OFFICE.OFFICE_NAME,
      STAFF.FIRST_NAME,
      STAFF.MIDDLE_INITIAL,
      STAFF.LAST_NAME,
      STAFF.PREFERRED_NAME,
      STAFF_ROLE.ROLE_ID,
      STAFF_ROLE.ROLE_NAME,
      PROJECT_TEAM.PROJECT_ID,
      PROJECT_TEAM.START_DATE,
      PROJECT_TEAM.END_DATE,
      PROJECT_TEAM.ALLOCATION,
      STAFF.STAFF_STATUS_ID,
      STAFF_STATUS.STATUS_NAME,
      PROJECT_TEAM.RESUME_SUBMITTED
    FROM
    (
      SELECT
        ID,
        PROJECT_ID,
        STAFF_ID,
        PROJECT_ROLE_ID,
        START_DATE,
        END_DATE,
        ALLOCATION,
        RESUME_SUBMITTED
      FROM 
        PROJECT_STAFF
      UNION ALL
      SELECT
        ID,
        PROJECT_ID,
        NULL,
        PROJECT_ROLE_ID,
        START_DATE,
        END_DATE,
        ALLOCATION,
        RESUME_SUBMITTED
      FROM
        PLANNED_PROJECT_STAFF
    ) PROJECT_TEAM
    INNER JOIN STAFF_ROLE
		  ON PROJECT_TEAM.PROJECT_ROLE_ID=STAFF_ROLE.ROLE_ID
      LEFT JOIN STAFF
      ON PROJECT_TEAM.STAFF_ID=STAFF.STAFF_ID
    LEFT OUTER JOIN (${getStaffGapNow}) AS GAP ON GAP.STAFF_ID = STAFF.STAFF_ID
    LEFT OUTER JOIN STAFF_STATUS
        ON (STAFF.STAFF_STATUS_ID IS NOT NULL AND STAFF_STATUS.STATUS_ID = STAFF.STAFF_STATUS_ID)
    LEFT OUTER JOIN OFFICE 
      ON  (STAFF.OFFICE_ID IS NOT NULL AND OFFICE.OFFICE_ID = STAFF.OFFICE_ID)
    WHERE
      ${condition}
    `,
  getProjectTeamsCalendar: (condition, startDate, endDate) =>
    `
    select CAST(
               CASE
                   WHEN GAP.STAFF_ID IS NOT NULL THEN 'GAP'
                   WHEN SA.ALLOCATION < 80 THEN 'UNDER_ALLOCATED'
                   WHEN SA.ALLOCATION > 100 THEN 'OVER_ALLOCATED'
                   WHEN SA.ALLOCATION IS NULL THEN 'BENCH'
                   ELSE 'NO_ALERT'
                   END AS CHAR)      AS ALLOCATION_STATUS,
       CALENDAR.WEEK, CALENDAR.YEAR, CALENDAR.START_DATE CA_START_DATE, 
       CALENDAR.END_DATE CA_END_DATE, SA.ALLOCATION, STAFF.STAFF_ID, STAFF.OFFICE_ID, 
       OFFICE.OFFICE_NAME, STAFF.FIRST_NAME, STAFF.MIDDLE_INITIAL, STAFF.LAST_NAME, 
       STAFF.PREFERRED_NAME, STAFF_ROLE.ROLE_ID, STAFF_ROLE.ROLE_NAME, 
       PROJECT_TEAM.PROJECT_ID, PROJECT_TEAM.START_DATE, PROJECT_TEAM.END_DATE, 
       PROJECT_TEAM.ALLOCATION, STAFF.STAFF_STATUS_ID, STAFF_STATUS.STATUS_NAME, 
       PROJECT_TEAM.RESUME_SUBMITTED, PROJECT_TEAM.PROJECT_STAFF_ID AS PROJECT_STAFF_ID
from CALENDAR
         left join STAFF_ALLOCATION SA on CALENDAR.CALENDAR_ID = SA.CALENDAR_ID
         inner join (
    SELECT ID PROJECT_STAFF_ID,
           PROJECT_ID,STAFF_ID,
           PROJECT_ROLE_ID,
           START_DATE,END_DATE,
           ALLOCATION,
           RESUME_SUBMITTED
    FROM PROJECT_STAFF
    UNION ALL
    SELECT ID PROJECT_STAFF_ID,
           PROJECT_ID,NULL,
           PROJECT_ROLE_ID,
           START_DATE,END_DATE,
           ALLOCATION,RESUME_SUBMITTED
    FROM PLANNED_PROJECT_STAFF
) PROJECT_TEAM on PROJECT_TEAM.PROJECT_STAFF_ID = SA.PROJECT_STAFF_ID
         INNER JOIN STAFF_ROLE
                    ON PROJECT_TEAM.PROJECT_ROLE_ID = STAFF_ROLE.ROLE_ID
         INNER JOIN STAFF
                    ON PROJECT_TEAM.STAFF_ID = STAFF.STAFF_ID
         LEFT OUTER JOIN (${getStaffGapNow}) AS GAP ON GAP.STAFF_ID = STAFF.STAFF_ID 
         LEFT OUTER JOIN STAFF_STATUS
                         ON (STAFF.STAFF_STATUS_ID IS NOT NULL AND STAFF_STATUS.STATUS_ID = STAFF.STAFF_STATUS_ID)
         LEFT OUTER JOIN OFFICE
                         ON (STAFF.OFFICE_ID IS NOT NULL AND OFFICE.OFFICE_ID = STAFF.OFFICE_ID)
    WHERE
      ${condition}
      AND (CALENDAR.END_DATE >= '${startDate}')
      AND (CALENDAR.START_DATE < '${endDate}')
    `,
  insertProjectRole: (role) =>
    `
    INSERT INTO PLANNED_PROJECT_STAFF ( 
      START_DATE,
      END_DATE,
      ALLOCATION,
      PROJECT_ROLE_ID,
      PROJECT_ID,
      RESUME_SUBMITTED
    ) VALUES (
      '${role.START_DATE}',
      '${role.END_DATE}',
      ${role.ALLOCATION},
      ${role.PROJECT_ROLE_ID},
      ${role.PROJECT_ID},
      '${role.RESUME_SUBMITTED}'
    )
    `,
  updateProjectRole: (role) =>
    `
    UPDATE PLANNED_PROJECT_STAFF SET 
      START_DATE = '${role.START_DATE}',
      END_DATE = '${role.END_DATE}',
      ALLOCATION = ${role.ALLOCATION},
      PROJECT_ROLE_ID  = ${role.PROJECT_ROLE_ID}, 
      PROJECT_ID = ${role.PROJECT_ID},
      RESUME_SUBMITTED = '${role.RESUME_SUBMITTED}'
    WHERE ID = ${role.ID}
    `,
  bulkRoleUpdate: (tableName, startDate, endDate, projectId, ids) =>
    `
    UPDATE ${tableName} SET
      START_DATE = '${startDate}',
      END_DATE = '${endDate}'
    WHERE
      PROJECT_ID = ${projectId} AND
      ID IN (${ids.join(',')})
    `,
  deleteProjectPlanned: (projectId, id) =>
    `
    DELETE FROM PLANNED_PROJECT_STAFF 
    WHERE
      PROJECT_ID = ${projectId} AND
      ID = ${id}    
    `,
  deleteStaffAllocation: (id) =>
    `
    DELETE FROM STAFF_ALLOCATION 
    WHERE PROJECT_STAFF_ID = ${id}    
    `,
  deleteProjectStaff: (projectId, id) =>
    `
    DELETE FROM PROJECT_STAFF 
    WHERE
      PROJECT_ID = ${projectId} AND
      ID = ${id}    
    `,
  getAlert: (id, staffId, startDate, endDate, allocation) =>
    `
    SELECT 
      COALESCE(SUM(PROJECT_STAFF.ALLOCATION), 0) + ${allocation} TOTAL
    FROM
      PROJECT_STAFF
    INNER JOIN
      PROJECT ON PROJECT.PROJECT_ID = PROJECT_STAFF.PROJECT_ID
    WHERE 
      PROJECT_STAFF.END_DATE > CURDATE()
      AND PROJECT_STAFF.ID <> ${id}
      AND PROJECT_STAFF.STAFF_ID = ${staffId}
      AND PROJECT_STAFF.START_DATE < '${endDate}'
      AND PROJECT_STAFF.END_DATE > '${startDate}'
    `,
  getAssignmentDetails: (plannedId) =>
    `SELECT * FROM PLANNED_PROJECT_STAFF WHERE ID = ${plannedId}`,
  insertProjectStaff: (staffId, plannedId) =>
    `
    INSERT INTO PROJECT_STAFF (STAFF_ID, START_DATE, END_DATE, ALLOCATION, PROJECT_ROLE_ID, CONFIRMED, PROJECT_ID)
    Select ${staffId}, START_DATE, END_DATE, ALLOCATION, PROJECT_ROLE_ID, CONFIRMED, PROJECT_ID 
    FROM PLANNED_PROJECT_STAFF WHERE ID = ${plannedId}
    `,
  insertStaffAllocation: (plannedStaffId) =>
    `
      INSERT INTO STAFF_ALLOCATION
        (CALENDAR_ID, PROJECT_STAFF_ID, ALLOCATION)
        SELECT CALENDAR.CALENDAR_ID, PROJECT_STAFF.ID, PROJECT_STAFF.ALLOCATION 
        FROM CALENDAR LEFT JOIN 
        PROJECT_STAFF ON PROJECT_STAFF.ID = ${plannedStaffId} 
          WHERE CALENDAR.START_DATE >= DATE_ADD(PROJECT_STAFF.START_DATE, INTERVAL(1 - DAYOFWEEK(PROJECT_STAFF.START_DATE)) DAY)
          AND CALENDAR.END_DATE <= DATE_ADD(PROJECT_STAFF.END_DATE, INTERVAL(7 - DAYOFWEEK(PROJECT_STAFF.END_DATE)) DAY)
    `,
  removeProjectPlan: (plannedId) =>
    `DELETE FROM PLANNED_PROJECT_STAFF WHERE ID = ${plannedId}`,
  assignmentList: (plannedId, condition) =>
    `
    SELECT
      CALENDAR.WEEK,
      CALENDAR.YEAR,
      PROJECT_STAFF.STAFF_ID,
      STAFF_ALLOCATION.ALLOCATION
    FROM
      CALENDAR
      INNER JOIN STAFF_ALLOCATION
      ON CALENDAR.CALENDAR_ID = STAFF_ALLOCATION.CALENDAR_ID
      INNER JOIN PROJECT_STAFF
      ON PROJECT_STAFF.ID = STAFF_ALLOCATION.PROJECT_STAFF_ID
      LEFT JOIN PLANNED_PROJECT_STAFF
      on PLANNED_PROJECT_STAFF.ID = ${plannedId}
    WHERE
      CALENDAR.START_DATE >= date_add(LAST_DAY(PLANNED_PROJECT_STAFF.START_DATE - INTERVAL 1 MONTH), interval 1 Day)
      AND CALENDAR.END_DATE <= PLANNED_PROJECT_STAFF.END_DATE
      AND ${condition}
    `,
  outlookList: (startDate, endDate, condition) =>
    `
    SELECT
      CALENDAR.WEEK,
      CALENDAR.YEAR,
      PROJECT_STAFF.STAFF_ID,
      STAFF_ALLOCATION.ALLOCATION
    FROM
      CALENDAR
      INNER JOIN STAFF_ALLOCATION
      ON CALENDAR.CALENDAR_ID = STAFF_ALLOCATION.CALENDAR_ID
      INNER JOIN PROJECT_STAFF
      ON PROJECT_STAFF.ID = STAFF_ALLOCATION.PROJECT_STAFF_ID
    WHERE
      CALENDAR.START_DATE >= '${startDate}'
      AND CALENDAR.END_DATE <= '${endDate}'
      AND ${condition}
    `,
  updateAllocation: (allocation, year, week, plannedStaffId) =>
    `
    UPDATE 
      STAFF_ALLOCATION
    SET
      ALLOCATION = ${allocation}
    WHERE
      PROJECT_STAFF_ID = ${plannedStaffId}
      AND CALENDAR_ID = (SELECT CALENDAR_ID FROM CALENDAR WHERE YEAR = ${year} AND WEEK = ${week})
    `,
};
