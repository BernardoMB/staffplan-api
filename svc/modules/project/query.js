// const CONST = require('../../common/const');

module.exports = {
  ProjectList: (Condition) => (
    `SELECT 
      PROJECT.PROJECT_NAME, 
      PROJECT.PROJECT_ID,
      PROJECT.PROJECT_CITY,
      PROJECT.PROJECT_STATE,
      PROJECT_STATUS.STATUS_NAME,
      PROJECT.START_DATE,
      PROJECT.END_DATE,
      PROJECT.PROJECT_ROM,
      OFFICE.OFFICE_NAME,
      TIMELINE_TYPE.TYPE TIMELINE,
      (SELECT COUNT(NOTE_ID) FROM
        NOTES WHERE NOTES.PROJECT_ID = PROJECT.PROJECT_ID) NOTECOUNT,
      (SELECT COUNT(ID) FROM
        PLANNED_PROJECT_STAFF WHERE
          PLANNED_PROJECT_STAFF.PROJECT_ID = PROJECT.PROJECT_ID) OPENROLE
    FROM 
      PROJECT
    INNER JOIN 
      PROJECT_STATUS
        ON PROJECT_STATUS_ID = PROJECT_STATUS.STATUS_ID
    INNER JOIN 
      OFFICE
        ON OFFICE.OFFICE_ID = PROJECT.OFFICE_ID
    INNER JOIN TIMELINE_TYPE
        ON TIMELINE_TYPE.TIMELINE_TYPE_ID = PROJECT.TIMELINE_TYPE_ID
      ${Condition}
    `   
  ),
  getTeam: (id) => (
    `
    SELECT
      PROJECT_STAFF.PROJECT_ID,
      STAFF.STAFF_ID,
      STAFF.FIRST_NAME,
      STAFF.MIDDLE_INITIAL,
      STAFF.LAST_NAME,
      STAFF.PREFERRED_NAME,
      STAFF_ROLE.ROLE_NAME
    FROM 
      PROJECT_STAFF  
    INNER JOIN STAFF  
      ON PROJECT_STAFF.STAFF_ID = STAFF.STAFF_ID
    INNER JOIN STAFF_ROLE
      ON STAFF_ROLE.ROLE_ID = PROJECT_STAFF.PROJECT_ROLE_ID

    WHERE
      PROJECT_STAFF.PROJECT_ID = ${id}
    `
  ),
  getOpenRoles: (condition) => (
    `
    SELECT 
      PROJECT.PROJECT_NAME,
      PROJECT.PROJECT_ID,
      PROJECT.PROJECT_CITY,
      PROJECT.PROJECT_STATE,
      STAFF_ROLE.ROLE_NAME,
      PROJECT_STATUS.STATUS_NAME,
      PROJECT.START_DATE,
      PROJECT.END_DATE,
      PLANNED_PROJECT_STAFF.ALLOCATION,
      PLANNED_PROJECT_STAFF.RESUME_SUBMITTED,
      OFFICE.OFFICE_NAME,
      (SELECT COUNT(NOTE_ID) FROM
        NOTES WHERE NOTES.PROJECT_ID = PROJECT.PROJECT_ID) NOTECOUNT
    FROM 
      PROJECT
    INNER JOIN PLANNED_PROJECT_STAFF
      ON PROJECT.PROJECT_ID=PLANNED_PROJECT_STAFF.PROJECT_ID
    INNER JOIN STAFF_ROLE
      ON STAFF_ROLE.ROLE_ID=PLANNED_PROJECT_STAFF.PROJECT_ROLE_ID
    INNER JOIN PROJECT_STATUS
      ON PROJECT_STATUS.STATUS_ID=PROJECT.PROJECT_STATUS_ID
    INNER JOIN OFFICE
      ON OFFICE.OFFICE_ID=PROJECT.OFFICE_ID
   ${condition}
    ` 
  ),
  getProjectTeams: (condition) => (
    `
    SELECT
      STAFF.FIRST_NAME,
      STAFF.MIDDLE_INITIAL,
      STAFF.LAST_NAME,
      STAFF.PREFERRED_NAME,
      PROJECT.PROJECT_NAME,
      PROJECT.PROJECT_ID,
      PROJECT.PROJECT_CITY,
      PROJECT.PROJECT_STATE,
      STAFF_ROLE.ROLE_NAME,
      PROJECT_STATUS.STATUS_NAME,
      PROJECT.START_DATE,
      PROJECT.END_DATE,
      PROJECT_TEAM.ALLOCATION,
      PROJECT_TEAM.RESUME_SUBMITTED
    FROM
	    PROJECT 
	  INNER JOIN
      (
        SELECT 
          PROJECT_ID,
          STAFF_ID,
          PROJECT_ROLE_ID,
          ALLOCATION,
          RESUME_SUBMITTED
        FROM 
          PROJECT_STAFF
        UNION ALL
        SELECT 
          PROJECT_ID,
          NULL,
          PROJECT_ROLE_ID,
          ALLOCATION,
          RESUME_SUBMITTED
        FROM
          PLANNED_PROJECT_STAFF
      
      ) PROJECT_TEAM
		  ON PROJECT_TEAM.PROJECT_ID = PROJECT.PROJECT_ID
	  LEFT JOIN STAFF
 		  ON PROJECT_TEAM.STAFF_ID=STAFF.STAFF_ID
	  INNER JOIN STAFF_ROLE
		  ON PROJECT_TEAM.PROJECT_ROLE_ID=STAFF_ROLE.ROLE_ID
    INNER JOIN PROJECT_STATUS
      ON PROJECT.PROJECT_STATUS_ID=PROJECT_STATUS.STATUS_ID
    ${condition}
    ` 
  ),

  getProjectDetail: (id) => (
    `
    SELECT
      PROJECT.PROJECT_ID,
      PROJECT.START_DATE,
      PROJECT.END_DATE,
      OFFICE.OFFICE_NAME,
      PROJECT_GROUP.GROUP_NAME,
      PROJECT.PROJECT_DESCRIPTION,
      CUSTOMER.CUSTOMER_NAME,
      CUSTOMER.CUSTOMER_CONTACT,
      CATEGORY.CATEGORY_NAME,
      PROJECT_TYPE.TYPE_NAME
    FROM 
      PROJECT 
    INNER JOIN PROJECT_GROUP
      ON PROJECT_GROUP.GROUP_ID=PROJECT.GROUP_ID
    INNER JOIN OFFICE
      ON OFFICE.OFFICE_ID=PROJECT.OFFICE_ID
    LEFT JOIN CUSTOMER_PROJECTS
      ON CUSTOMER_PROJECTS.PROJECT_ID=PROJECT.PROJECT_ID
    LEFT JOIN CUSTOMER
      ON CUSTOMER.CUSTOMER_ID=CUSTOMER_PROJECTS.CUSTOMER_ID
    INNER JOIN CATEGORY
      ON CATEGORY.CATEGORY_ID=PROJECT.CATEGORY_ID
    INNER JOIN PROJECT_TYPE
      ON PROJECT_TYPE.TYPE_ID=PROJECT.PROJECT_TYPE_ID
    WHERE
      PROJECT.PROJECT_ID = ${id}
    `
  ),

  getProjectNotes: (id) => (
    `
    SELECT 
      PROJECT.PROJECT_NAME,
      PROJECT.PROJECT_ID,
      NOTES.NOTE_ID,
      NOTES.CONTENT,
      NOTES.NODE_PARENT_ID,
      NOTES.IS_PARENT,
      USERS.FIRST_NAME
    FROM
	    PROJECT
	  INNER JOIN NOTES
		  ON PROJECT.PROJECT_ID=NOTES.PROJECT_ID
	  INNER JOIN USERS
		  ON USERS.USER_ID=NOTES.USER_ID
    WHERE
      PROJECT.PROJECT_ID = ${id}
    `
  ),
}